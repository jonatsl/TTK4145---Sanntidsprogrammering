package requests

import (
	"Heis/elevator"
	"Heis/driver-go/elevio"
)

type DirnBehaviourPair struct {
	dirn      elevio.MotorDirection
	behaviour ElevatorBehaviour
}

func requests_above(e Elevator) int {
	for f := e.floor + 1; f < NumFloors; i++ {
		for btn := 0; btn < NumButtons; btn++ {
			if e.requests[f][btn] {
				return 1
			}
		}
	}
	return 0
}

func requests_below(e Elevator) int {
	for f := 0; f < e.floor; f++ {
		for btn := 0; btn < NumButtons; btn++ {
			if e.requests[f][btn] {
				return 1
			}
		}
	}
	return 0
}

func requests_here(e Elevator) int {
	for btn := 0; btn < NumButtons; btn++ {
		if e.requests[e.floor][btn] {
			return 1
		}
	}
	return 0
}

func requests_chooseDirection(e Elevator) DirnBehaviourPair {
	switch e.dirn {
	case MD_Up:
		if requests_above(e) != 0{											//trenger vi !=0 her? vi sier jo if requests_above = 1 på de under?
			return DirnBehaviourPair{dirn: MD_Up, behaviour: EB_Moving}		//trenger vi å ha dirn: og behaviour: foran?
		}
		else if requests_here(e) {
			return DirnBehaviourPair{MD_Down.EB_DoorOpen}
		}
		else if requests_below(e) {
			return DirnBehaviourPair{dir
				n: MD_Down, behaviour: EB_Moving}
		}
		else {
			return DirnBehaviourPair{MD_Stop,EB_Idle}
		}
	case MD_Down:
		if requests_below(e){
			return DirnBehaviourPair{MD_Down,EB_Moving}
		}
		else if requests_here(e){
			return DirnBehaviourPair{MD_Up,EB_DoorOpen}
		}
		else if requests_above(e) {
			return DirnBehaviourPair{MD_Up,EB_Moving}
		}
		else{
			return DirnBehaviourPair{MD_Stop,EB_Idle}
		}
	case MD_Stop:
		if requests_here(e){
			return DirnBehaviourPair{MD_Stop,EB_DoorOpen}
		}
		else if requests_above(e) {
			return DirnBehaviourPair{MD_Up,EB_Moving}
		}
		else if requests_below(e){
			return DirnBehaviourPair{MD_Down,EB_Moving}

		}
		else{
			return DirnBehaviourPair{MD_Stop,EB_Idle}
		}
	default:
		return DirnBehaviourPair{MD_Stop,EB_Idle}
	}
}




func requests_shouldStop(e Elevator) int {
	switch e.dirn {
	case MD_Down:
		return e.requests[e.floor][BT_HallDown] || e.requests[e.floor][BT_Cab] || !requests_below(e)
	case MD_Up:
		return e.requests[e.floor][BT_HallUp] || e.requests[e.floor][B_Cab] || !requests_above(e)
	case MD_Stop:
	default:
		return 1
	}
}


func requests_shouldClearImmediately(e Elevator, btn_floor int, btn_type Button) int {
		if e.floor == btn_floor && ((e.dirn == MD_Up && btn_type == BT_HallUp) || 
		(e.dirn == MD_Down && btn_type == BT_HallDown) || 
		e.dirn == MD_Stop || 
		btn_type == BT_Cab) {
			return 1
		}
		else return 0			//Må man ha klammeparentes her?
}


func requests_clearAtCurrentFloor(e Elevator) Elevator {
	e.requests[e.floor][BT_Cab] = 0
	switch e.dirn {
	case MD_Up:
		if !requests_above(e) && !e.requests[e.floor][BT_HallUp] {
			e.requests[e.floor][BT_HallDown] = 0
		}
		e.requests[e.floor][BT_HallUp] = 0		
	case MD_Down:
		if !requests_below(e) && !e.requests[e.floor][BT_HallDown] {
			e.requests[e.floor][BT_HallUp] = 0
		}
		e.requests[e.floor][BT_HallDown] = 0
	case MD_Stop:
	default:
		e.requests[e.floor][BT_HallUp] = 0
		e.requests[e.floor][BT_HallDown] = 0
	}
	return e
}


